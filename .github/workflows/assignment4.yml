name: assignment4

# Trigger the workflow manually using the workflow_dispatch event
on:
  workflow_dispatch:

jobs:
  build:
    # The build job runs on the latest version of Ubuntu
    runs-on: ubuntu-latest

    steps:

      - name: Capture workflow start time
        run: echo "WORKFLOW_START_TIME=$(date -Iminutes)" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create log file
        run: |
          echo "${{ env.WORKFLOW_START_TIME }}" > log.txt
          echo "Nadav Peled, Daniel Katz" >> log.txt

      - name: Verify Create log file file creating
        run: |
          ls -l
          pwd
          cat log.txt || echo "log.txt not found!"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2 #latest stable version

      - name: Build and export stock portfolio app
        id: build_stock_portfolio_app
        uses: docker/build-push-action@v4
        with:
          context: ./stock_portfolio_app
          tags: stock_portfolio_app:latest
          outputs: type=docker, dest=/tmp/stock_portfolio_app_image.tar

      - name: Build and export capital gain service
        id: build_capital_gain_service
        uses: docker/build-push-action@v4
        with:
          context: ./capital_gain_service
          tags: capital_gain_service:latest
          outputs: type=docker, dest=/tmp/capital_gain_service_image.tar

      - name: Upload stock_portfolio_app image
        uses: actions/upload-artifact@v4
        with:
          name: stock_portfolio_app_image
          path: /tmp/stock_portfolio_app_image.tar

      - name: Upload capital_gain_service image
        uses: actions/upload-artifact@v4
        with:
          name: capital_gain_service_image
          path: /tmp/capital_gain_service_image.tar

      # TODO: try to change the images to fail this step
      - name: Update log file
        if: always()
        run: |
          if [ "${{ steps.build_stock_portfolio_app.outcome }}" == "success" ] && [ "${{ steps.build_capital_gain_service.outcome }}" == "success" ]; then
          echo "image successfully built" >> log.txt
          else
          echo "image not able to be built" >> log.txt
          fi

      - name: Upload log file
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: log-file
          path: log.txt

  test:
    # The test job runs on the latest version of Ubuntu and depends on the build job
    runs-on: ubuntu-latest
    needs: build

    steps:
      ### 1. download Docker images, set up Docker Compose ###

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create test results file
        run: |
          cd tests
          touch assn4_test_results.txt

      - name: Verify Create test results file creating
        run: |
          cd tests
          ls -l
          pwd
          cat tests/assn4_test_results.txt || echo "tests/assn4_test_results.txt not found!"

      - name: Download log file
        uses: actions/download-artifact@v4
        with:
          name: log-file
          path: .

      - name: Download stock_portfolio_app image
        uses: actions/download-artifact@v4
        with:
          name: stock_portfolio_app_image
          path: /tmp

      - name: Download capital_gain_service image
        uses: actions/download-artifact@v4
        with:
          name: capital_gain_service_image
          path: /tmp

      - name: Verify downloaded artifacts
        run: |
          echo "/tmp directory:"
          ls /tmp
          echo "root directory:"
          ls .

      - name: Load Docker images
        run: |
          docker load --input /tmp/stock_portfolio_app_image.tar
          docker load --input /tmp/capital_gain_service_image.tar

      - name: Set up Docker Compose
        id: set_up_docker_compose
        uses: hoverkraft-tech/compose-action@v2.0.1
        with:
          compose-file: docker-compose-workflow.yml
          action: up

      # Before starting the tests, wait for the container to initialize
      - name: Wait for the container to initialize
        run: sleep 10

      - name: Verify Running Containers
        run: docker ps

      - name: Update log file
        if: always()
        run: |
          if [ "${{ steps.set_up_docker_compose.outcome }}" == "success" ] ; then
          echo "Container up and running" >> log.txt
          else
          echo "Container failed to run" >> log.txt
          fi

      ### 2. set up python and pytest environment ###

      - name: Set up Python
        uses: actions/setup-python@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests
          pip install -r stock_portfolio_app/requirements.txt

      - name: Run tests
        id: run_tests
        run: pytest -v tests/assn4_tests.py >> tests/assn4_test_results.txt

      - name: Verify Run tests
        run: cat tests/assn4_test_results.txt || echo "assn4_test_results.txt not found!"

      - name: Update log file
        if: always()
        run: |
          if [ "${{ steps.run_tests.outcome }}" == "success" ] ; then
          echo "tests succeeded" >> log.txt
          else
          echo "tests failed" >> log.txt
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: assn4_test_results
          path: tests/assn4_test_results.txt

      - name: Upload log file
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: log-file
          path: log.txt
          overwrite: true

      # Step to shut down Docker Compose
      - name: Tear down services
        uses: hoverkraft-tech/compose-action@v2.0.1
        with:
          compose-file: docker-compose-workflow.yml
          action: down

  query:
    # The query job runs on the latest version of Ubuntu and depends on the test job
    runs-on: ubuntu-latest
    needs: test

    steps:
      # Step to check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create test response file
        run: |
          cd tests
          touch response.txt

      - name: Download stock_portfolio_app image
        uses: actions/download-artifact@v4
        with:
          name: stock_portfolio_app_image
          path: /tmp

      - name: Download capital_gain_service image
        uses: actions/download-artifact@v4
        with:
          name: capital_gain_service_image
          path: /tmp

      - name: Verify downloaded artifacts
        run: |
          echo "/tmp directory:"
          ls /tmp
          echo "root directory:"
          ls .

      - name: Load Docker images
        run: |
          docker load --input /tmp/stock_portfolio_app_image.tar
          docker load --input /tmp/capital_gain_service_image.tar

      - name: Set up Docker Compose
        id: set_up_docker_compose
        uses: hoverkraft-tech/compose-action@v2.0.1
        with:
          compose-file: docker-compose-workflow.yml
          action: up

      - name: Wait for the container to initialize
        run: sleep 10

      - name: Verify Running Containers
        run: docker ps

      - name: Execute POST requests for stocks
        run: |
          STOCKS_JSON="tests/stocks.json"
          jq -c '.[0:6][]' "$STOCKS_JSON" | while read -r row; do
            echo "Posting stock: $row"
            curl -X POST -H "Content-Type: application/json" -d "$row" http://localhost:5001/stocks
          done

      - name: Verify the POST requests
        run: |
          echo "Response from server:"
          RESPONSE=$(curl -s "http://localhost:5001/stocks")
          echo "$RESPONSE"
      
          [ "$(echo "$RESPONSE" | jq '. | length')" -ge 6 ] && echo "‚úÖ Verification successful" || (echo "‚ùå ERROR: Less than 6 stocks found" && exit 1)

      - name: Debug API responses
        run: |
          echo "Checking all stocks:"
          curl -s "http://localhost:5001/stocks"
      
          echo "Checking stocks with shares=7:"
          curl -s "http://localhost:5001/stocks?shares=7"
      
          echo "Checking capital-gains with numsharesgt=30:"
          curl -s "http://localhost:5003/capital-gains?numsharesgt=30"

      - name: Read query.txt and generate response.txt
        run: |
          RESPONSE_FILE="tests/response.txt"
          > $RESPONSE_FILE  # Clear file before writing
          
          echo "Reading queries from query.txt..."
          cat query.txt
          echo "--------------------------------------"
          
          while IFS= read -r line || [[ -n "$line" ]]; do
            echo "üìå Processing query: $line"
          
            if [[ $line == stocks:* ]]; then
              qs="${line#stocks:}"
              echo "‚û°Ô∏è Querying Stocks API: http://localhost:5001/stocks?$qs"
              response=$(curl -s "http://localhost:5001/stocks?$qs" | jq .)
              echo "query: $line" >> $RESPONSE_FILE
              echo "response: $response" >> $RESPONSE_FILE
          
            elif [[ $line == capital-gains:* ]]; then
              qs="${line#capital-gains:}"
              echo "‚û°Ô∏è Querying Capital Gains API: http://localhost:5003/capital-gains?$qs"
              response=$(curl -s "http://localhost:5003/capital-gains?$qs" | jq .)
              echo "query: $line" >> $RESPONSE_FILE
              echo "response: $response" >> $RESPONSE_FILE
          
            else
              echo "‚ö†Ô∏è Skipping unknown query format: $line"
              continue
            fi
          
            echo "‚úÖ Query: $line" | tee -a $RESPONSE_FILE
            echo "üì• Response: $response" | tee -a $RESPONSE_FILE
            echo "--------------------------------------" | tee -a $RESPONSE_FILE
          
          done < query.txt

      - name: Upload response.txt
        uses: actions/upload-artifact@v4
        with:
          name: response.txt
          path: tests/response.txt

      - name: Tear down services
        uses: hoverkraft-tech/compose-action@v2.0.1
        with:
          compose-file: docker-compose-workflow.yml
          action: down
